{
    "collab_server" : "",
    "contents" : "#' @title\n#' Rare Events Search\n#' @description\n#' Function to create data frame of rare events that need to be validated in EMS\n#' @param x eFOQA username in single quotes\n#' @param y eFOQA password in single quotes\n#' @return\n#' Data frame consisting of flight record, flight date, tail number, fleet, takeoff airport code, landing airport code, and event type\n#' @export\nrare_events <- function(x, y) {\n\ntryCatch({\n\n## Load relevant packages\nlibrary(Rems)\nlibrary(magrittr)\nlibrary(lubridate)\nlibrary(plyr)\n\n## Connect to EFOQA and assign file name to metadata\nconn <- connect(x, y)\nmetadata <- 'rare_events2.db'\n#if using metadata file within package itself\n#metadata <- system.file(\"metadata\", \"rare_events2.db\", package=\"safetydata\")\n\n#Create flight query object using the existing metadata file\nfq <- flt_query(conn, \"ems4-app\", metadata)\n\n##Create object with first day of month X number of months prior\nmo6 <<- as.Date(paste(c(year(Sys.Date()), month(Sys.Date()), 01), collapse=\"-\")) %m-% months(6)\nprevious7 <<- as.Date(Sys.Date() - days(7))\n\n\n##GPWS\nfq <- set_database(fq, 'p0: library flight safety events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p0: event type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter(\"'P0: Event Type' in c('GPWS: Terrain', 'GPWS: Pull Up', 'GPWS: Terrain Pull Up')\") %>%\n  filter('\"p0: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p0: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P0: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\ngpws <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(gpws) != 0) {\n  gpws <- rename(gpws,c('P0: Event Type'='Event_Type'))\n  gpws <- gpws %>%\n    mutate(`Event_Type` = paste('P0', `Event_Type`, sep=\": \"))\n}\n\n\n##Stall Warning\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p0: event type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"P0: Event Type\" == \"Stall Warning\"') %>%\n  filter('\"p0: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p0: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P0: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\nstall <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(stall) != 0) {\n  stall <- rename(stall,c('P0: Event_Type'='Event_Type'))\n  stall <- stall %>%\n    mutate(`Event_Type` = paste('P0', `Event_Type`, sep=\": \"))\n}\n\n\n##E190 Not in Takeoff Config\n##landing airport code filter needs to be excluded\neventtypetoconfig190 <<- c('E190 Not in T/O Config excluding autobrakes')\n\nfq <- set_database(fq, 'p172: not in t/o config events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p172: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p172: Event Type\" == eventtypetoconfig190') %>%\n  filter('\"p172: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p172: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P172: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter('\"Fleet Group\" == \"E190\"')\n\ntoconfig190 <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(toconfig190) != 0) {\n  toconfig190 <- rename(toconfig190,c('P172: Event Type'='Event_Type'))\n  toconfig190 <- toconfig190 %>%\n    mutate(`Event_Type` = paste('P172', `Event_Type`, sep=\": \"))\n}\n\n\n##Airbus Not in Takeoff Config\neventtypetoconfigbus <<- c('Airbus Not in T/O Config excluding autobrakes')\n\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p172: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p172: Event Type\" == eventtypetoconfigbus') %>%\n  filter('\"p172: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p172: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P172: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter(\"'Fleet Group' in c('A320', 'A321')\") %>%\n  filter('\"P172: Max Brake Temp at Begin Takeoff POF (deg C)\" < 300')\n\ntoconfigbus <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(toconfigbus) != 0) {\n  toconfigbus <- rename(toconfigbus,c('P172: Event Type'='Event_Type'))\n  toconfigbus <- toconfigbus %>%\n    mutate(`Event_Type` = paste('P172', `Event_Type`, sep=\": \"))\n}\n\n\n##High Bank Angle\nfq <- set_database(fq, 'p186: high bank angle profile events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p186: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p186: Event Type\" == \"High Bank Angle for this Height\"') %>%\n  filter('\"p186: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p186: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P186: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter('\"P186: Maximum Bank Angle While Airborne (Absolute Value)\" >= 50')\n\nbankangle <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(bankangle) != 0) {\n  bankangle <- rename(bankangle,c('P186: Event Type'='Event_Type'))\n  bankangle <- bankangle %>%\n    mutate(`Event_Type` = paste('P186', `Event_Type`, sep=\": \"))\n}\n\n\n##Operating Altitude Exceedance E190\nfq <- set_database(fq, 'p174: maximum operating altitude events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p174: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p174: Event Type\" == \"190 Altitude Exceedance\"') %>%\n  filter('\"p174: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p174: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P174: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter('\"fleet group\" == \"E190\"')\n\nopaltitude190 <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(opaltitude190) != 0) {\n  opaltitude190 <- rename(opaltitude190,c('P174: Event Type'='Event_Type'))\n  opaltitude190 <- opaltitude190 %>%\n    mutate(`Event_Type` = paste('P174', `Event_Type`, sep=\": \"))\n}\n\n\n##Operating Altitude Exceedance Airbus\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p174: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p174: Event Type\" == \"320/321 Exceedance\"') %>%\n  filter('\"p174: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p174: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P174: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter(\"'Fleet Group' in c('A320', 'A321')\")\n\nopaltitudebus <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(opaltitude190) != 0) {\n  opaltitudebus <- rename(opaltitudebus,c('P174: Event Type'='Event_Type'))\n  opaltitudebus <- opaltitudebus %>%\n    mutate(`Event_Type` = paste('P174', `Event_Type`, sep=\": \"))\n}\n\n\n##HSRTO\nfq <- set_database(fq, 'p196: HSRTO Events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p196: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p196: Event Type\" == \"HSRTO\"') %>%\n  filter('\"p196: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p196: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P196: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\nhsrto <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(hsrto) != 0) {\n  hsrto <- rename(hsrto,c('P196: Event Type'='Event_Type'))\n  hsrto <- hsrto %>%\n    mutate(`Event_Type` = paste('P196', `Event_Type`, sep=\": \"))\n}\n\n\n##Inadvertent Spoiler Deployment\nfq <- set_database(fq, 'p176: Inadvertant Spoiler Deployment Events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p176: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p176: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p176: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P176: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter('\"P176: Inadvertant Spoiler Deployment V2\" == 1') %>%\n  filter('\"p176: Spoiler Position Max (Left) V2 (deg)\" >= 40') %>%\n  filter('\"p176: Spoiler Position Max (Right) V2 (deg)\" >= 40')\n\nspoiler <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(spoiler) != 0) {\n  spoiler <- rename(spoiler,c('P176: Event Type'='Event_Type'))\n  spoiler <- spoiler %>%\n    mutate(`Event_Type` = paste('P176', `Event_Type`, sep=\": \"))\n}\n\n\n##Parking Brake in Flight E190\neventtypeparkingbrake190 <<- c('Parking Brake in Flight E190')\nphaseofflight <<- c('A) Start & Push',\n                    'B) Taxi Out',\n                    'C) Takeoff',\n                    'D) Rejected Takeoff',\n                    'K) Roll Out',\n                    'M) Taxi In',\n                    'N) Parking',\n                    'unknown state')\n\nfq <- set_database(fq, 'p136: parking brake in flight events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p136: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p136: Event Type\" == eventtypeparkingbrake190') %>%\n  filter('\"p136: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p136: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P136: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter('\"Fleet Group\" == \"E190\"') %>%\n  filter(\"'P136: Phase of Flight' not in c(phaseofflight)\")\n\nparkingbrake190 <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(parkingbrake190) != 0) {\n  parkingbrake190 <- rename(parkingbrake190,c('P136: Event Type'='Event_Type'))\n  parkingbrake190 <- parkingbrake190 %>%\n    mutate(`Event_Type` = paste('P136', `Event_Type`, sep=\": \"))\n}\n\n\n##Parking Brake in Flight Airbus\neventtypeparkingbrakebus <<- c('Parking Brake in Flight Airbus')\n\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p136: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p136: Event Type\" == eventtypeparkingbrakebus') %>%\n  filter('\"p136: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p136: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P136: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter(\"'Fleet Group' in c('A320', 'A321')\") %>%\n  filter(\"'P136: Phase of Flight' not in c(phaseofflight)\")\n\nparkingbrakebus <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(parkingbrakebus) != 0) {\n  parkingbrakebus <- rename(parkingbrakebus,c('P136: Event Type'='Event_Type'))\n  parkingbrakebus <- parkingbrakebus %>%\n    mutate(`Event_Type` = paste('P136', `Event_Type`, sep=\": \"))\n}\n\n\n##Egregious Unstable Approach\neventtype <<- c('<-1700 below 500ft. HAT', 'Gear Down and Locked below 500ft. HAT',\n                'Late Final Flap Extension and Handle Movement Below 500ft. HAT',\n                'Speed <-15 Kts below 500ft. HAT vapp',\n                'Speed >40 Kts below 500ft. HAT vapp')\n\nfq <- set_database(fq, 'p198: unstable approach events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p198: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter(\"'P198: Event Type' in c(eventtype)\") %>%\n  filter('\"p198: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p198: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P198: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6') %>%\n  filter('\"P198: Mean Vertical Speed during Roll Out (excluding contact before sustained WOW) (ft/min)\"\n         >= \"-20\"') %>%\n  filter('\"P198: Mean Vertical Speed during Roll Out (excluding contact before sustained WOW) (ft/min)\"\n         < \"21\"')\n\nunstableapp <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(unstableapp) != 0) {\n  unstableapp <- rename(unstableapp,c('P198: Event Type'='Event_Type'))\n  unstableapp <- unstableapp %>%\n    mutate(`Event_Type` = paste('P198', `Event_Type`, sep=\": \"))\n}\n\n\n##Low Level Windshear\n##excludes fleet filter\nfq <- set_database(fq, 'p188: low level windshear events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p188: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter(\"'p188: Event Type' in c('Low-Level Windshear Airbus Recovery',\n         'Low-Level Windshear E190 Recovery')\") %>%\n  filter('\"p188: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p188: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P188: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\n\nwindshear <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(windshear) != 0) {\n  windshear <- rename(windshear,c('P188: Event Type'='Event_Type'))\n  windshear <- windshear %>%\n    mutate(`Event_Type` = paste('P188', `Event_Type`, sep=\": \"))\n}\n\n\n##Low Fuel Landings\nfq <- set_database(fq, 'p197: low fuel landings events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p197: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter(\"'p197: Event Type' in c('A320 Low Fuel Landing',\n         'A321 Low Fuel Landing',\n         'E190 Low Fuel Landing')\") %>%\n  filter('\"p197: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p197: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P197: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\n\nlowfuel <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(lowfuel) != 0) {\n  lowfuel <- rename(lowfuel,c('P197: Event Type'='Event_Type'))\n  lowfuel <- lowfuel %>%\n    mutate(`Event_Type` = paste('P197', `Event_Type`, sep=\": \"))\n}\n\n\n##Autopilot Disengaged in RVSM\nfq <- set_database(fq, 'p216: autopilot disengage above rvsm events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p216: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p216: Event Type\" != \"Autopilot Disengaged (RVSM)\"') %>%\n  filter('\"p216: Status\" == \"FOQA: Complete\"') %>%\n  filter('\"p216: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P216: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\n\nrvsm <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(rvsm) != 0) {\n  rvsm <- rename(rvsm,c('P216: Event Type'='Event_Type'))\n  rvsm <- rvsm %>%\n    mutate(`Event_Type` = paste('P216', `Event_Type`, sep=\": \"))\n}\n\n\n##Ground Spoilers\nfq <- set_database(fq, 'p205: ground spoilers not deployed events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p205: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter(\"'p205: Event Type' in c('Ground Spoilers Not Deployed Airbus',\n         'Ground Spoilers Not Deployed Embraer')\") %>%\n  filter('\"p205: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p205: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P205: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\n\ngroundspoilers <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(groundspoilers) != 0) {\n  groundspoilers <- rename(groundspoilers,c('P205: Event Type'='Event_Type'))\n  groundspoilers <- groundspoilers %>%\n    mutate(`Event_Type` = paste('P205', `Event_Type`, sep=\": \"))\n}\n\n\n##Flap Handle Movement during Takeoff\nfq <- set_database(fq, 'p203: flap movement on takeoff events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p203: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p203: Event Type\" == \"Flap Handle Movement on Takeoff\"') %>%\n  filter('\"p203: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p203: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P203: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\nflaphandle <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(flaphandle) != 0) {\n  flaphandle <- rename(flaphandle,c('P203: Event Type'='Event_Type'))\n  flaphandle <- flaphandle %>%\n    mutate(`Event_Type` = paste('P203', `Event_Type`, sep=\": \"))\n}\n\n\n##Low Energy (Airbus)\n##need to change download date to flight date\nfq <- set_database(fq, 'p211: risk of stall (low energy) events - all events')\nfq <- reset(fq) %>%\n  select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p211: Event Type') %>%\n  filter('\"Data Quality (master)\" == \"Acceptable\"') %>%\n  filter('\"takeoff airport code\" != \"UNKNOWN\"') %>%\n  filter('\"landing airport code\" != \"UNKNOWN\"') %>%\n  filter('\"p211: Event Type\" == \"Low Energy (Airbus)\"') %>%\n  filter('\"p211: Status\" != \"FOQA: Complete\"') %>%\n  filter('\"p211: false positive\" == \"Not a False Positive\"') %>%\n  filter(\"'P211: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')\") %>%\n  filter('\"flight date\" >= mo6')\n\nlowenergy <- run(fq)\n\n# If there are any records, then do the below - otherwise skip\nif(nrow(lowenergy) != 0) {\n  lowenergy <- rename(lowenergy, c('P211: Event Type'='Event_Type'))\n  lowenergy <- lowenergy %>%\n    mutate(`Event_Type` = paste('P211', `Event_Type`, sep=\": \"))\n}\n\n#row bind all queries into 1 table\nrareevents <<- rbind(bankangle, gpws, hsrto, opaltitude190, opaltitudebus, parkingbrake190, parkingbrakebus,\n                     spoiler, toconfig190, toconfigbus, windshear, stall, lowfuel, rvsm, unstableapp,\n                     groundspoilers, flaphandle, lowenergy)\nreturn(rareevents)\n\n}, error=function(a,b) {rare_events_metadata(x, y)\n  rare_events(x, y)})\n\n}\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1514928890842.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "859922047",
    "id" : "35651687",
    "lastKnownWriteTime" : 1515165700,
    "last_content_update" : 1515165700567,
    "path" : "~/GitHub/safetydata/R/rare_events.R",
    "project_path" : "R/rare_events.R",
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}