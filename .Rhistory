filter('"flight date" >= mo6') %>%
filter('"P176: Inadvertant Spoiler Deployment V2" == 1') %>%
filter('"p176: Spoiler Position Max (Left) V2 (deg)" >= 40') %>%
filter('"p176: Spoiler Position Max (Right) V2 (deg)" >= 40')
spoiler <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(spoiler) != 0) {
spoiler <- rename(spoiler,c('P176: Event Type'='Event_Type'))
spoiler <- spoiler %>%
mutate(`Event_Type` = paste('P176', `Event_Type`, sep=": "))
}
##Parking Brake in Flight E190
eventtypeparkingbrake190 <<- c('Parking Brake in Flight E190')
phaseofflight <<- c('A) Start & Push',
'B) Taxi Out',
'C) Takeoff',
'D) Rejected Takeoff',
'K) Roll Out',
'M) Taxi In',
'N) Parking',
'unknown state')
fq <- set_database(fq, 'p136: parking brake in flight events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p136: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter('"p136: Event Type" == eventtypeparkingbrake190') %>%
filter('"p136: Status" != "FOQA: Complete"') %>%
filter('"p136: false positive" == "Not a False Positive"') %>%
filter("'P136: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6') %>%
filter('"Fleet Group" == "E190"') %>%
filter("'P136: Phase of Flight' not in c(phaseofflight)")
parkingbrake190 <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(parkingbrake190) != 0) {
parkingbrake190 <- rename(parkingbrake190,c('P136: Event Type'='Event_Type'))
parkingbrake190 <- parkingbrake190 %>%
mutate(`Event_Type` = paste('P136', `Event_Type`, sep=": "))
}
##Parking Brake in Flight Airbus
eventtypeparkingbrakebus <<- c('Parking Brake in Flight Airbus')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p136: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter('"p136: Event Type" == eventtypeparkingbrakebus') %>%
filter('"p136: Status" != "FOQA: Complete"') %>%
filter('"p136: false positive" == "Not a False Positive"') %>%
filter("'P136: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6') %>%
filter("'Fleet Group' in c('A320', 'A321')") %>%
filter("'P136: Phase of Flight' not in c(phaseofflight)")
parkingbrakebus <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(parkingbrakebus) != 0) {
parkingbrakebus <- rename(parkingbrakebus,c('P136: Event Type'='Event_Type'))
parkingbrakebus <- parkingbrakebus %>%
mutate(`Event_Type` = paste('P136', `Event_Type`, sep=": "))
}
##Egregious Unstable Approach
eventtype <<- c('<-1700 below 500ft. HAT', 'Gear Down and Locked below 500ft. HAT',
'Late Final Flap Extension and Handle Movement Below 500ft. HAT',
'Speed <-15 Kts below 500ft. HAT vapp',
'Speed >40 Kts below 500ft. HAT vapp')
fq <- set_database(fq, 'p198: unstable approach events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p198: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter("'P198: Event Type' in c(eventtype)") %>%
filter('"p198: Status" != "FOQA: Complete"') %>%
filter('"p198: false positive" == "Not a False Positive"') %>%
filter("'P198: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6') %>%
filter('"P198: Mean Vertical Speed during Roll Out (excluding contact before sustained WOW) (ft/min)"
>= "-20"') %>%
filter('"P198: Mean Vertical Speed during Roll Out (excluding contact before sustained WOW) (ft/min)"
< "21"')
unstableapp <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(unstableapp) != 0) {
unstableapp <- rename(unstableapp,c('P198: Event Type'='Event_Type'))
unstableapp <- unstableapp %>%
mutate(`Event_Type` = paste('P198', `Event_Type`, sep=": "))
}
##Low Level Windshear
##excludes fleet filter
fq <- set_database(fq, 'p188: low level windshear events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p188: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter("'p188: Event Type' in c('Low-Level Windshear Airbus Recovery',
'Low-Level Windshear E190 Recovery')") %>%
filter('"p188: Status" != "FOQA: Complete"') %>%
filter('"p188: false positive" == "Not a False Positive"') %>%
filter("'P188: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6')
windshear <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(windshear) != 0) {
windshear <- rename(windshear,c('P188: Event Type'='Event_Type'))
windshear <- windshear %>%
mutate(`Event_Type` = paste('P188', `Event_Type`, sep=": "))
}
##Low Fuel Landings
fq <- set_database(fq, 'p197: low fuel landings events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p197: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter("'p197: Event Type' in c('A320 Low Fuel Landing',
'A321 Low Fuel Landing',
'E190 Low Fuel Landing')") %>%
filter('"p197: Status" != "FOQA: Complete"') %>%
filter('"p197: false positive" == "Not a False Positive"') %>%
filter("'P197: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6')
lowfuel <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(lowfuel) != 0) {
lowfuel <- rename(lowfuel,c('P197: Event Type'='Event_Type'))
lowfuel <- lowfuel %>%
mutate(`Event_Type` = paste('P197', `Event_Type`, sep=": "))
}
##Autopilot Disengaged in RVSM
fq <- set_database(fq, 'p216: autopilot disengage above rvsm events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p216: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter('"p216: Event Type" != "Autopilot Disengaged (RVSM)"') %>%
filter('"p216: Status" == "FOQA: Complete"') %>%
filter('"p216: false positive" == "Not a False Positive"') %>%
filter("'P216: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6')
rvsm <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(rvsm) != 0) {
rvsm <- rename(rvsm,c('P216: Event Type'='Event_Type'))
rvsm <- rvsm %>%
mutate(`Event_Type` = paste('P216', `Event_Type`, sep=": "))
}
##Ground Spoilers
fq <- set_database(fq, 'p205: ground spoilers not deployed events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p205: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter("'p205: Event Type' in c('Ground Spoilers Not Deployed Airbus',
'Ground Spoilers Not Deployed Embraer')") %>%
filter('"p205: Status" != "FOQA: Complete"') %>%
filter('"p205: false positive" == "Not a False Positive"') %>%
filter("'P205: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6')
groundspoilers <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(groundspoilers) != 0) {
groundspoilers <- rename(groundspoilers,c('P205: Event Type'='Event_Type'))
groundspoilers <- groundspoilers %>%
mutate(`Event_Type` = paste('P205', `Event_Type`, sep=": "))
}
##Flap Handle Movement during Takeoff
fq <- set_database(fq, 'p203: flap movement on takeoff events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p203: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter('"p203: Event Type" == "Flap Handle Movement on Takeoff"') %>%
filter('"p203: Status" != "FOQA: Complete"') %>%
filter('"p203: false positive" == "Not a False Positive"') %>%
filter("'P203: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6')
flaphandle <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(flaphandle) != 0) {
flaphandle <- rename(flaphandle,c('P203: Event Type'='Event_Type'))
flaphandle <- flaphandle %>%
mutate(`Event_Type` = paste('P203', `Event_Type`, sep=": "))
}
##Low Energy (Airbus)
##need to change download date to flight date
fq <- set_database(fq, 'p211: risk of stall (low energy) events - all events')
fq <- reset(fq) %>%
select('flight record', 'flight date', 'tail number', 'fleet', 'takeoff airport code', 'landing airport code', 'p211: Event Type') %>%
filter('"Data Quality (master)" == "Acceptable"') %>%
filter('"takeoff airport code" != "UNKNOWN"') %>%
filter('"landing airport code" != "UNKNOWN"') %>%
filter('"p211: Event Type" == "Low Energy (Airbus)"') %>%
filter('"p211: Status" != "FOQA: Complete"') %>%
filter('"p211: false positive" == "Not a False Positive"') %>%
filter("'P211: Processing State' in c('Succeeded', 'Reprocessing', 'Need to Reprocess')") %>%
filter('"flight date" >= mo6')
lowenergy <- run(fq)
# If there are any records, then do the below - otherwise skip
if(nrow(lowenergy) != 0) {
lowenergy <- rename(lowenergy, c('P211: Event Type'='Event_Type'))
lowenergy <- lowenergy %>%
mutate(`Event_Type` = paste('P211', `Event_Type`, sep=": "))
}
#row bind all queries into 1 table
rareevents <<- rbind(bankangle, gpws, hsrto, opaltitude190, opaltitudebus, parkingbrake190, parkingbrakebus,
spoiler, toconfig190, toconfigbus, windshear, stall, lowfuel, rvsm, unstableapp,
groundspoilers, flaphandle, lowenergy)
return(rareevents)
}
rare_events('jbu03', 'jbuPW20174')
setwd("C:/Users/kl52863/Desktop/Predix Training")
rare_events('jbu03', 'jbuPW20174')
?system.file
library(safetydata)
library(safetydata)
safetydata::rare_events('jbu03', 'jbuPW20174')
getwd()
getwd()
library(safetydata)
safetydata::rare_events('jbu03', 'jbuPW20174')
library(knitr)
library(rmarkdown)
library(roxygen2)
library(safetydata)
library(safetydata)
library(devtools)
document()
library(safetydata)
setwd("C:/Users/kl52863/Desktop")
library(safetydata)
setwd("C:/Users/kl52863/Desktop")
safetydata::rare_events('jbu03', 'jbuPW20174')
library(safetydata)
library(devtools)
document()
library(roxygen2)
document()
library(safetydata)
library(roxygen2)
library(devtools)
document()
library(safetydata)
document()
setwd("~/GitHub/safetydata")
document()
safetydata::rare_events('jbu03', 'jbuPW20174')
setwd("C:/Users/kl52863/Desktop")
library(safetydata)
safetydata::rare_events('jbu03', 'jbuPW20174')
setwd("~/GitHub/safetydata/R")
library(devtools)
document()
document()
document()
document()
library(roxygen2)
library(devtools)
document()
document()
setwd("C:/Users/kl52863/Desktop")
rare_events <- function(x, y, env = .GlobalEnv) {
# Load required libraries
library(Rems)
library(lubridate)
library(safetydata)
library(tidyverse)
username <- x
password <- y
ems_name <- 'ems4-app'
metadata_db <- 'event_validation.db'
# Query and save metadata
# Global variables of event types (EMS API Work-Around)
assign("eventtypetoconfig", c('E190 Not in T/O Config excluding autobrakes', 'Airbus Not in T/O Config excluding autobrakes'), envir = .GlobalEnv)
assign("eventtypeeua", c('<-1700 below 500ft. HAT', 'Gear Down and Locked below 500ft. HAT',
'Late Final Flap Extension and Handle Movement Below 500ft. HAT',
'Speed <-15 Kts below 500ft. HAT vapp',
'Speed >40 Kts below 500ft. HAT vapp'), envir = .GlobalEnv)
# Create tibble of metadata fields to be queried
metadata_event_fields_df <-
# P0: GPWS & Stall
tibble(search_name = "gpws_stall",
col_update_dbtree = list(c('apm events', 'standard lib', 'p0')),
col_set_database = list(c('p0: library flight safety events - all events')),
profile = "P0",
eventtype = "c('GPWS: Terrain', 'GPWS: Pull Up', 'GPWS: Terrain Pull Up', 'Stall Warning')",
col_update_fieldtree =
list(c('Profile 0: Event Information'),
c('Profiles', 'Standard Library Profiles', 'P0: Library Flight Safety Events', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
) %>%
# P196: HSRTO
bind_rows(tibble(search_name = "hsrto",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p196: HSRTO Events')),
col_set_database = list(c('p196: HSRTO Events - all events')),
profile = "P196",
eventtype = "c('HSRTO')",
col_update_fieldtree =
list(c('Profile 196: Event Information'),
c('Profiles', 'FOQA', 'Event Validation', 'P196: HSRTO', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P172: Not in TO Config
bind_rows(tibble(search_name = "toconfig",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p172: not in t/o config events')),
col_set_database = list(c('p172: not in t/o config events - all events')),
profile = "P172",
eventtype = "eventtypetoconfig",
col_update_fieldtree =
list(c('Profile 172: Event Information'),
c('Profiles', 'FOQA', 'Event Validation', 'P172: Not in T/O Config', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P186: High Bank Angle
bind_rows(tibble(search_name = "bankangle",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p186: high bank angle profile events')),
col_set_database = list(c('p186: high bank angle profile events - all events')),
profile = "P186",
eventtype = "c('High Bank Angle for this Height')",
col_update_fieldtree =
list(c('Profile 186: Event Information'),
c('Profiles', 'FOQA', 'Event Validation', 'P186: High Bank Angle Profile', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P174: Operating Altitude Exceedance
bind_rows(tibble(search_name = "opalitude",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p174: Maximum Operating Altitude Events')),
col_set_database = list(c('p174: maximum operating altitude events - all events')),
profile = "P174",
eventtype = "c('190 Altitude Exceedance', '320/321 Exceedance')",
col_update_fieldtree =
list(c('Profile 174: Event Information'),
c('Profiles', 'FOQA', 'Event Validation', 'P174: Maximum Operating Altitude', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P176: Inadvertent Spoiler Deployment
bind_rows(tibble(search_name = "spoilerdeployment",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p176: Inadvertant Spoiler Deployment Events')),
col_set_database = list(c('p176: Inadvertant Spoiler Deployment Events - all events')),
profile = "P176",
eventtype = "c('Inadvertant Spoiler Deployment (as event)')",
col_update_fieldtree =
list(c('Profile 176: Event Information'),
c('Profiles', 'FOQA', 'Event Validation', 'P176: Inadvertant Spoiler Deployment', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P197: Low Fuel Landing
bind_rows(tibble(search_name = "lowfuel",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p197: low fuel landings events')),
col_set_database = list(c('p197: low fuel landings events - all events')),
profile = "P197",
eventtype = "c('A320 Low Fuel Landing', 'A321 Low Fuel Landing', 'E190 Low Fuel Landing')",
col_update_fieldtree =
list(c('Profile 197: Event Information'),
c('Profiles', 'FOQA', 'event validation', 'P197: low fuel landings', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P211: Low Energy Airbus
bind_rows(tibble(search_name = "lowenergy",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p211: risk of stall (low energy) events')),
col_set_database = list(c('p211: risk of stall (low energy) events - all events')),
profile = "P211",
eventtype = "c('Low Energy (Airbus)')",
col_update_fieldtree =
list(c('Profile 211: Event Information'),
c('Profiles', 'FOQA', 'event validation', 'P211: risk of stall (low energy)', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P203: Flap Handle Movement
bind_rows(tibble(search_name = "flaphandle",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p203: flap movement on takeoff events')),
col_set_database = list(c('p203: flap movement on takeoff events - all events')),
profile = "P203",
eventtype = "c('Flap Handle Movement on Takeoff')",
col_update_fieldtree =
list(c('Profile 203: Event Information'),
c('Profiles', 'FOQA', 'event validation', 'P203: flap movement on takeoff', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P205: Ground Spoilers
bind_rows(tibble(search_name = "groundspoilers",
col_update_dbtree = list(c('apm events', 'foqa', 'event validation', 'p205: ground spoilers not deployed events')),
col_set_database = list(c('p205: ground spoilers not deployed events - all events')),
profile = "P205",
eventtype = "c('Ground Spoilers Not Deployed Airbus', 'Ground Spoilers Not Deployed Embraer')",
col_update_fieldtree =
list(c('Profile 205: Event Information'),
c('Profiles', 'FOQA', 'event validation', 'P205: ground spoilers not deployed', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
# P198: Egregious Unstable Approach
bind_rows(tibble(search_name = "eua",
col_update_dbtree = list(c('apm events', 'FOQA', 'Event Validation', 'P198: Unstable Approach Events')),
col_set_database = list(c('p198: unstable approach events - all events')),
profile = "P198",
eventtype = "eventtypeeua",
col_update_fieldtree =
list(c('Profile 198: Event Information'),
c('Profiles', 'FOQA', 'Event Validation', 'P198: unstable approach', 'Processing Status'),
c('Flight Review', 'Data Quality')
)
)) %>%
mutate(search_factor = factor(search_name, levels = unlist(distinct(., search_name)))) %>% # Create factor of searches to correct sorting of search_group
mutate(search_group = group_indices(., search_factor)) %>% # Create search_group
group_by(search_group) %>%
mutate(search_group_row = row_number()) %>% # Create search_group_row for each search_group
ungroup() %>%
select(search_group,
search_group_row,
search_name,
profile,
eventtype,
col_update_dbtree,
col_set_database,
col_update_fieldtree) # Re-order and drop unnecessary columns for organization
# Determine number search groups and of field trees in each search group
indices <- metadata_event_fields_df %>%
group_by(search_group) %>%
summarise(max_search_group_row = max(search_group_row))
# Query and save metadata
map(1:max(pull(indices, search_group)), function(gn) {
flt_query(conn = connect(username, password), ems_name = ems_name, data_file = metadata_db) %>%
update_dbtree(unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), col_update_dbtree))) %>%
set_database(unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), col_set_database))) %>%
generate_preset_fieldtree() %>% # Flight Information, Aircraft Information, and Navigation Information
assign("fq", ., envir = .GlobalEnv)
map(1:unlist(pull(filter(indices, search_group == gn), max_search_group_row)), function(rn) {
fq %>%
update_fieldtree(unlist(pull(filter(metadata_event_fields_df, search_group == gn, search_group_row == rn), col_update_fieldtree))) %>%
assign("fq", ., envir = .GlobalEnv)
})
fq %>%
save_metadata()
fq <- fq %>%
reset()
})
# Query and save data
map(1:max(pull(indices, search_group)), function(gn) {
fq1 <- flt_query(conn = connect(username, password), ems_name = ems_name, data_file = metadata_db) %>%
set_database(unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), col_set_database))) %>%
Rems::select('Event Record',
'Flight Record',
'Flight Date',
'tail number',
'fleet',
'takeoff airport code',
'landing airport code',
paste0(unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), profile)), ': Event Type'),
paste0(unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), profile)), ': False Positive'),
paste0(unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), profile)), ': Status')
) %>%
Rems::filter('"flight date" >= as.Date(paste(c(year(Sys.Date()), month(Sys.Date()), 01), collapse="-")) %m-% months(6)') %>%
Rems::filter('"Data Quality (master)" == "Acceptable"') %>%
Rems::filter('"takeoff airport code" != "UNKNOWN"') %>%
Rems::filter(paste0('"', unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), profile)), ': Status" != "FOQA: Complete"')) %>%
Rems::filter(paste0('"', unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), profile)), ': False Positive" == "Not a False Positive"')) %>%
Rems::filter(paste0('"', unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), profile)), ': Event Type" in c(',
pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), eventtype), ')')) %>%
Rems::filter(paste0('"', unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), profile)), ': Processing State" in c("Succeeded", "Reprocessing", "Need to Reprocess")'))
# The following are exception filters that are only applied in certain scenarios - see documentation
if(!(unlist(pull(filter(metadata_event_fields_df, search_group == gn & search_group_row == 1), search_name)) %in% c('hsrto', 'toconfig'))) {
fq1 <- fq1 %>%
Rems::filter('"landing airport code" != "UNKNOWN"')
}
fq1 %>%
run() %>%
as_tibble() %>%
assign("df1", ., envir = .GlobalEnv)
if(nrow(df1) != 0) {
df1 %>%
select(EventRecord = 1,
FlightRecord = 2,
FlightDate = 3,
Tail = 4,
Fleet = 5,
TakeoffAirport = 6,
LandingAirport = 7,
EventType = 8,
FalsePositive = 9,
Status = 10) %>%
#bind_rows() %>%
assign(paste0("df", "rareevents", gn), ., envir = .GlobalEnv)
}
})
mget(ls(pattern="^dfrareevents", envir = .GlobalEnv), inherits =TRUE) %>%
bind_rows() %>%
assign("rareevents", ., envir = .GlobalEnv)
#if none, turn df1 to rareevents df
ls(pattern="^dfrareevents", envir = .GlobalEnv) %>%
assign("eventdfs", ., envir = .GlobalEnv)
if(length(eventdfs) == 0) {assign("rareevents", df1, envir = .GlobalEnv)}
# Clean Global environment
rm(fq, df1, eventdfs, eventtypeeua, eventtypetoconfig, envir=.GlobalEnv)
rm(list=ls(pattern="^dfrareevents", envir=.GlobalEnv), envir=.GlobalEnv)
}
rare_events('jbu03', 'jbuPW20175')
View(rareevents)
